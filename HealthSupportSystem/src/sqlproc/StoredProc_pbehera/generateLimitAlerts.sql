CREATE OR REPLACE PROCEDURE SSHARM17."generateLimitAlerts"
AS
	CURSOR patientLimit IS 
			SELECT DISTINCT P.PatientSSN as patientSSN, L.LIMITID as limitId, O.OBSERVATIONID as observationId   
			FROM PATIENT P, LIMITS L, OBSERVATION O, OBSERVATIONDETAILS OD
			WHERE 
			L.LIMITID IN (
			  SELECT li.LIMITID FROM LIMITS li
				WHERE li.LIMITID NOT IN (SELECT l.LIMITID FROM LIMITSFORDISEASE r UNION SELECT l.LIMITID FROM LIMITSFORPATIENT r)
				UNION
				SELECT li.LIMITID FROM LIMITSFORDISEASE li, SICKHASMAJORDISEASE s 
				WHERE s.PATIENTSSN = P.PATIENTSSN
				AND s.DISEASENAME = li.DISEASENAME
				UNION
				SELECT li.LIMITID FROM LIMITSFORPATIENT li
				WHERE li.PATIENTSSN = P.PATIENTSSN
			) AND P.PATIENTSSN = O.PATIENTSSN
			AND O.OBSERVATIONID = OD.OBSERVATIONID
			AND L.OBSERVATIONSPECNAME = OD.OBSERVATIONSPECNAME
			AND L.METRICNAME = OD.METRICNAME
			AND ((OD.OBSERVATIONVALUE > L.UPPERLIMIT) OR (OD.OBSERVATIONVALUE < L.LOWERLIMIT));
			
	observationCount INTEGER;
	entriesFound INTEGER;
	existingAlertClear INTEGER;
	alertId INTEGER;
	recommendationIds "RecommendationIds";
	observationId INTEGER;
BEGIN
	FOR limitRow IN patientLimit LOOP
			SELECT count(*) INTO entriesFound FROM ALERT a, ALERTFORLIMIT al
			WHERE a.ALERTID = al.ALERTID
			AND al.LIMITID = limitRow.LimitId;
			
			alertId := ALERTS_SEQ.NEXTVAL;
			
			IF entriesFound = 0 THEN
				INSERT INTO ALERT (ALERTID,ALERTTYPE,PATIENTSSN,ALERTACTION,ALERTDATE)
				VALUES (alertId, 'OUT_OF_LIMIT', limitRow.patientSSN,'New',SYSDATE);
				INSERT INTO ALERTFORLIMIT (ALERTID, LIMITID, OBSERVATIONID) VALUES(alertId, limitRow.limitID, limitRow.observationId);	
			END IF;
	END LOOP;
   
END;